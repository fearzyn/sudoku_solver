import pygame 

pygame.font.init()
#x = 0
#y = 0
section = 720 / 9 # 80
size = (720, 720)
screen = pygame.display.set_mode(size)
black = (0, 0, 0)
red = (255,0,0)
green = (0, 255, 0)
white = (250, 250, 250)

screen.fill(white)
my_font = pygame.font.SysFont('Comic Sans MS', 30)
pygame.display.set_caption('SUDOKU SOLVER')


board = [
        [7, 8, 0, 4, 0, 0, 1, 2, 0],
        [6, 0, 0, 0, 7, 5, 0, 0, 9],
        [0, 0, 0, 6, 0, 1, 0, 7, 8],
        [0, 0, 7, 0, 4, 0, 2, 6, 0],
        [0, 0, 1, 0, 5, 0, 9, 3, 0],
        [9, 0, 4, 0, 6, 0, 0, 0, 5],
        [0, 7, 0, 3, 0, 0, 0, 1, 2],
        [1, 2, 0, 0, 0, 7, 4, 0, 0],
        [0, 4, 9, 2, 0, 6, 0, 0, 7]
    ]




 # drawing functions 
def draw_selected_box():
    for i in range(2):
        pygame.draw.line(screen, red, (x * section - 3, (y + i)*section), (x * section + section + 3, (y + i)*section), 7)
        pygame.draw.line(screen, red, ( (x + i)* section, y * section ), ((x + i) * section, y * section + section), 7) 

#draw board

def draw():

    # draws numbers
    offset = 32
    for row in range(9):
        for col in range(9):
            # Makes it so that 0 is not drawn in
            if board[row][col] != 0:
                #output = board[row][col]
                numbers = my_font.render(str(board[row][col]), True, black)
                screen.blit(numbers, ((row * 80) + offset, (col * 80) + offset - 10) )

    #draws board 
    win_x = 720
    win_y = 720
    pygame.draw.lines(screen, black, False, [(0,0), (win_x,0), (win_x,win_y), (0, win_y), (0,0)], 20)
    i = 1
    while (i * 80) < 720:
        # Thicker lines on 3x3 borders
        line_width = 3 if i % 3 > 0 else 10
        # Column lines 
        pygame.draw.lines(screen, black, False, [((i * section), 0), ((i * section), win_y)], line_width) # first loop: (95, 15) -> (95, 735) then (175, 15) -> (175, 735)
        # Row lines
        pygame.draw.lines(screen, black, False, [(win_x, (i * section)), (0, (i * section))], line_width)
        i += 1
    #pygame.display.update()



# solver
#valid

def valid(board, row, col, number):
    for i in range(9):
        # Check row
        if board[row][i] == number:
            return False
        # Check column
        if board[i][col] == number:
            return False
    # Check 3x3 boxes
    corner_row = row - row % 3
    corner_col = col - col % 3
    for x in range(3):
        for y in range(3):
            if board[corner_row + x][corner_col + y] == number:
                return False
    # If number passes, then it must be a valid number to place
    #pygame.display.update()

    return True



#solve
def solve(board, row, col):
     
    while board[row][col] != 0:
        if row < 8:
            row += 1
        elif row == 8 and col < 8:
            row = 0
            col += 1
        elif row == 8 and col == 8:
            return True

    for num in range(1, 10):
        if valid(board, row, col, num):
            board[row][col]= num
            global x, y
            x = row
            y = col
            
            screen.fill(white)
            draw()
            draw_selected_box()
            pygame.display.update()
            pygame.time.delay(150)

            if solve(board, row, col):
                return True
            else:
                board[row][col]= 0
            
            screen.fill(white)
            draw()
            draw_selected_box()
            pygame.display.update()
            pygame.time.delay(150) 

    return False 
 



# main
'''
running = True
while running:
  for event in pygame.event.get():
    if event.type == pygame.QUIT:
      running = False

    draw()
    pygame.display.update() 

    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_RETURN:

            #draw_board()
            solve(board, 0, 0)
            pygame.display.update() 
'''

running = True
while running:
  for event in pygame.event.get():
    if event.type == pygame.QUIT:
      running = False

    draw()
    pygame.display.update() 

    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_RETURN:
            if solve(board,0,0):
                draw()
                pygame.display.update() 
            else:
                screen.fill(red)
                error = my_font.render("No solution", True, black)
                screen.blit(error, (x//2 -78, y//2) )
                pygame.display.update()