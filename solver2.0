import sys, pygame


# Sudoku helper function
def valid(board, row, col, number):
    for i in range(9):
        # Check row
        if board[row][i] == number:
            return False
        # Check column
        if board[i][col] == number:
            return False
    # Check 3x3 boxes
    corner_row = row - row % 3
    corner_col = col - col % 3
    for x in range(3):
        for y in range(3):
            if board[corner_row + x][corner_col + y] == number:
                return False
    # If number passes, then it must be a valid number to place
    pygame.display.update()

    return True

# Sudoku solver uysing backtracking and recursion

def solve(board, row, col):

    # if column is the last position
    if col == 9:
        # if row is the last row of the board then it is solved (since it is at the last column as well)
        if row == 8:
            return True
        # else, move to the next row
        row += 1
        # If it goes past column limit then it will go into a new row and start from the first position ([0])
        col = 0
    if board[row][col] > 0:
        return solve(board, row, col + 1)
    
    for num in range(1, 10):
        if valid(board, row, col, num):
            board[row][col] = num 
            if solve(board, row, col +1):
                draw_solved(num, row, col)
                pygame.display.update()
                return True
            else:
                
                board[row][col] = 0
              
    return False
 

# Pygame
def draw_board():
    pygame.draw.lines(screen, black, False, [(0,0), (x,0), (x,y), (0, y), (0,0)], 20)
    i = 1
    while (i * 80) < 720:
        # Thicker lines on 3x3 borders
        line_width = 5 if i % 3 > 0 else 10
        # Column lines 
        pygame.draw.lines(screen, black, False, [((i * 80), 0), ((i * 80), 720)], line_width) # first loop: (95, 15) -> (95, 735) then (175, 15) -> (175, 735)
        # Row lines
        pygame.draw.lines(screen, black, False, [(720, (i * 80)), (0, (i * 80))], line_width)
        i += 1


def draw_numbers(board):
    offset = 32
    for row in range(9):
        for col in range(9):
            # Makes it so that 0 is not drawn in
            if board[row][col] != 0:
                output = board[row][col]
                numbers = my_font.render(str(output), True, black)
                screen.blit(numbers, [(col * 80) + offset, (row * 80) + offset - 10] )


def draw_solved(num, row, col):
    offset = 32
    draw = my_font.render(str(num), 1, black)
    screen.blit(draw, ((col * 80) + offset, (row * 80) + offset - 10))
    #pygame.display.update()
    #pygame.time.delay(100)


pygame.font.init()
x = 720
y = 720
size = (x, y)
screen = pygame.display.set_mode(size)
black = (0, 0, 0)
red = (255,0,0)
green = (0, 255, 0)
white = (250, 250, 250)

screen.fill(white)
my_font = pygame.font.SysFont('Comic Sans MS', 30)
pygame.display.set_caption('SUDOKU SOLVER')




board = [
        [7, 8, 0, 4, 0, 0, 1, 2, 0],
        [6, 0, 0, 0, 7, 5, 0, 0, 9],
        [0, 0, 0, 6, 0, 1, 0, 7, 8],
        [0, 0, 7, 0, 4, 0, 2, 6, 0],
        [0, 0, 1, 0, 5, 0, 9, 3, 0],
        [9, 0, 4, 0, 6, 0, 0, 0, 5],
        [0, 7, 0, 3, 0, 0, 0, 1, 2],
        [1, 2, 0, 0, 0, 7, 4, 0, 0],
        [0, 4, 9, 2, 0, 6, 0, 0, 7]
    ]


running = True
while running:
  for event in pygame.event.get():
    if event.type == pygame.QUIT:
      running = False
    

    draw_board()
    draw_numbers(board)

    pygame.display.update() 

    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_RETURN:
            if solve(board,0,0):
                draw_solved
                solve(board,0,0)
                pygame.display.update() 
            else:
                screen.fill(red)
                error = my_font.render("No solution", True, black)
                screen.blit(error, (x//2 -78, y//2) )
                pygame.display.update()





